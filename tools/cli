#! /bin/bash
# Phalcon App CLI
# author: Nicolas Pulido <nicolas.pulido@crazycake.tech>

# set project path
PROJECT_PATH="$(pwd)"

# app namespace
GROUP_NAME=$(basename $(dirname $(dirname $(pwd))))
APP_NAME=${PWD##*/}
# look by group & app-name for collisions
CONTAINER_NAME="$(docker ps | grep -o '\w*'$GROUP_NAME'_'$APP_NAME -m 1)"
# fallback, look by app-name
[ -z "$CONTAINER_NAME" ] && CONTAINER_NAME="$(docker ps | grep -o '\w*_'$APP_NAME -m 1)"

# app paths
TOOLS_PATH=$PROJECT_PATH"/.tools/"

# stop script if an error occurs
set -e

# help output
help() {

	echo -e "\033[93m > CLI $APP_NAME [$GROUP_NAME -> $CONTAINER_NAME] \033[0m"
	echo -e "\033[95m watch: Run JS bundler watcher daemon. Option --m for mailing (mjml).\033[0m"
	echo -e "\033[95m build: Build JS bundle and compile 'po' translation files. \033[0m"
	echo -e "\033[95m trans: Update translations 'po' file. \033[0m"
	echo -e "\033[95m php: Run app php CLI. \033[0m"
	echo -e "\033[95m logs: Watch Docker logs. \033[0m"
	echo -e "\033[95m clean: Clean cache & logs.\033[0m"
	echo -e "\033[97m > maintainer commands \033[0m"
	echo -e "\033[95m core: Install/update core package (requires cc-phalcon project). \033[0m"
	echo -e "\033[95m cc-js: Links dev core.js to node_modules (requires cc-js project). \033[0m"
	exit
}

checkContainerIsRunning() {

	# validate container is running
	if [[ -z "$CONTAINER_NAME" ]]; then
		echo -e "\033[31mRun application container first!\033[0m" && exit 1
	fi
}

# compile and generate mo files
buildTranslation() {

	echo -e "\033[94mSearching for .po files in langs folder \033[0m"

	# generate .mo files in LC_MESSAGES subfolder for each lang code
	docker exec -it $CONTAINER_NAME bash -c \
		'find /var/www/app/langs/ -type f -name "*.po" | while read PO_FILE ; do

			CODE=`basename "$PO_FILE" .po`
			TARGET_DIR="/var/www/app/langs/$CODE/LC_MESSAGES"
			mkdir -p "$TARGET_DIR"
			echo -e "\033[94mCompiling language file: $CODE \033[0m"
			msgfmt -o "$TARGET_DIR/app.mo" "$PO_FILE"
		done'

	echo -e "\033[92mDone! \033[0m"
}

# search and generate pot files
findTranslations() {

	echo -e "\033[95mCompiling volt files from container... \033[0m"

	# execute volt compailer in container
	docker exec -it $CONTAINER_NAME bash -c 'php /var/www/app/cli/cli.php main compileVolt'

	echo -e "\033[95mSearching for keyword 'trans' in php files... \033[0m"

	# find files (exclude some folders)
	docker exec -it $CONTAINER_NAME bash -c 'find /var/www/app/ /var/www/storage/cache/ -type f -name "*.php" > .translations'

	# generate pot file with xgettext and clean temp file
	docker exec -it $CONTAINER_NAME bash -c \
		'xgettext \
				--output app/langs/trans.pot \
				--directory app/ \
				--language="php" \
				--from-code=UTF-8 \
				--keyword='trans' \
				--package-version=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
				--package-name="crazycake" \
				--copyright-holder="CrazyCake" \
				--no-wrap \
				-f .translations \
		&& rm .translations \
		&& find /var/www/storage/cache -type f \( ! -iname ".*" \) -print0 | xargs -0 rm'

	# merge po file
	docker exec -it $CONTAINER_NAME bash -c \
		'find /var/www/app/langs/ -mindepth 1 -maxdepth 1 -type d | while read CODE_DIR; do

			cd "$CODE_DIR"
			CODE=`basename "$CODE_DIR"`

			if [ -f "$CODE".po ]; then
				msgmerge -U "$CODE".po ../trans.pot
			else
				msginit -i ../trans.pot --no-translator -l "$CODE"
			fi
		done'

	echo -e "\033[92mDone! \033[0m"
}

# commands
case "$1" in

watch)

	echo -e "\033[95mRunning bundler watcher...\033[0m"

	if [ "$2" = "--m" ]; then

		echo -e "\033[31mMJML watcher...\033[0m"

		mkdir -p ui/volt/mailing

		./node_modules/mjml/bin/mjml -w ui/mailing/*.volt.mjml -o ui/volt/mailing/

	else

		parcel watch ui/app.js --no-autoinstall --no-source-maps --dist-dir public/assets/ --public-url public/assets/ --cache-dir .parcel/
	fi
;;

build)

	checkContainerIsRunning

	echo -e "\033[95mCleaning code splits... \033[0m"

	find public/assets -type f \( ! -iname "app*" \) -exec rm -f {} \;

	echo -e "\033[95mBuilding bundle... \033[0m"

	parcel build ui/app.js --no-source-maps --dist-dir public/assets/ --public-url public/assets/ --cache-dir .parcel/ --detailed-report 40

	echo -e "\033[95mExecuting container '$CONTAINER_NAME' tasks... \033[0m"

	# rev assets in container
	docker exec -it $CONTAINER_NAME bash -c 'php /var/www/app/cli/cli.php main revAssets'

	# translations (gettext)
	buildTranslation
;;

trans)

	# translations (gettext)
	findTranslations
;;

php)

	checkContainerIsRunning

	docker exec -it $CONTAINER_NAME bash -c "php /var/www/app/cli/cli.php main ${@:2}"
;;

logs)

	checkContainerIsRunning

	docker logs -f $CONTAINER_NAME
;;

clean)

	checkContainerIsRunning

	docker exec -it $CONTAINER_NAME bash -c 'find /var/www/storage/cache /var/www/storage/logs -type f \( ! -iname ".*" \) -print0 | xargs -0 rm -f'

	rm -rf $PROJECT_PATH"/.parcel" || true

	echo -e "\033[92mDone! \033[0m"
;;

core)

	bash $TOOLS_PATH"core.bash" "${@:2}"
;;

cc-js)

	CORE_SRC_PATH="$HOME/workspace/cc-js/"

	# validations
	if [ ! -d $CORE_SRC_PATH ]; then

		echo -e "\033[31mProject cc-js not found ($CORE_SRC_PATH) \033[0m" && exit 1
	fi

	if [ ! -d "$PROJECT_PATH/node_modules/crazycake-js" ]; then

		echo -e "\033[31mFolder ./node_modules/crazycake-js not found ($CORE_SRC_PATH) \033[0m" && exit 1
	fi

	# create sym link
	rm ./node_modules/crazycake-js/core.js
	ln -s $CORE_SRC_PATH"/core.js" ./node_modules/crazycake-js/
;;

# defaults
*)
	help
;;
esac
